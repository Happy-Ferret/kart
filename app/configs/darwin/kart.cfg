# These are the default settings that every emulator core will use. You can
# override any setting for each core by editing its individual config file. Find
# these in /configs/$platform/$console.cfg

# These are the settings you are the most likely to want to edit.

########################################################################
########################## TYPICAL SETTINGS ############################
########################################################################

video_cg_shader = "/Applications/retroarch/shaders/Cg/scanline.cg"

####### Player 1 #######
input_player1_b = "backspace"
input_player1_a = "enter"
input_player1_y = "a"
input_player1_x = "s"
input_player1_select = "z"
input_player1_start = "x"
input_player1_up = "up"
input_player1_down = "down"
input_player1_left = "left"
input_player1_right = "right"
input_player1_l = "q"
input_player1_r = "w"

####### Player 2 #######
input_player2_b = "num1"
input_player2_a = "num2"
input_player2_y = "num3"
input_player2_x = "num4"
input_player2_select = "num5"
input_player2_start = "num6"
input_player2_up = "num7"
input_player2_down = "num8"
input_player2_left = "num9"
input_player2_right = "num0"
input_player2_l = "keypad0"
input_player2_r = "keypad1"

input_exit_emulator = escape
input_hold_fast_forward = l
input_rewind = r

video_fullscreen = true

# Rewinding buffer size in megabytes. Bigger rewinding buffer means you can rewind longer.
# The buffer should be approx. 20MB per minute of buffer time.
rewind_enable = true
rewind_buffer_size = 20
rewind_granularity = 2


# Automatically saves a savestate at the end of RetroArch's lifetime.
# The path is $SRAM_PATH.auto.
# RetroArch will automatically load any savestate with this path on startup if savestate_auto_load is set.
# savestate_auto_save = false
# savestate_auto_load = true

system_directory = "/Applications/retroarch/systems/all"


########################################################################
########################### OTHER SETTINGS #############################
########################################################################

#### Video

# Video driver to use. "gl", "xvideo", "sdl"
video_driver = "gl"

# If fullscreen, prefer using a windowed fullscreen mode.
# video_windowed_fullscreen = true

# Which monitor to prefer. 0 (default) means no particular monitor is preferred, 1 and up (1 being first monitor),
# suggests RetroArch to use that particular monitor.
#video_monitor_index = 0

# Video vsync.
# video_vsync = true

# Smoothens picture with bilinear filtering. Should be disabled if using pixel shaders.
video_smooth = false

# Forces rendering area to stay equal to game aspect ratio or as defined in video_aspect_ratio.
# video_force_aspect = true

# Only scales video in integer steps.
# The base size depends on system-reported geometry and aspect ratio.
# If video_force_aspect is not set, X/Y will be integer scaled independently.
# video_scale_integer = false

# A floating point value for video aspect ratio (width / height).
# If this is not set, aspect ratio is assumed to be automatic.
# Behavior then is defined by video_aspect_ratio_auto.
# video_aspect_ratio =

# If this is true and video_aspect_ratio is not set,
# aspect ratio is decided by libretro implementation.
# If this is false, 1:1 PAR will always be assumed if video_aspect_ratio is not set.
video_aspect_ratio_auto = true

# Forces cropping of overscanned frames.
# Exact behavior of this option is implementation specific.
# video_crop_overscan = false

# Path to Cg shader.
# video_cg_shader = "/Applications/retroarch/shaders/Cg/scanline.cg"

# Path to GLSL XML shader. If both Cg shader path and XML shader path are defined,
# Cg shader will take priority unless overridden in video_shader_type.
#video_bsnes_shader = "/Applications/retroarch/shaders/OpenGL/Themaister-scanlines.shader"

# Which shader type to use. Valid values are "cg", "bsnes", "none" and "auto"
# video_shader_type = auto

# Defines a directory where XML shaders are kept.
video_shader_dir = "/Applications/retroarch/shaders/OpenGL"

# Render to texture first. Useful when doing multi-pass shaders or control the output of shaders better.
# video_render_to_texture = false

# Defines the video scale of render-to-texture.
# The output FBO size is scaled by these amounts against the input size (typically 256 * 224 for SNES).
# video_fbo_scale_x = 2.0
# video_fbo_scale_y = 2.0

# Define shader to use for second pass (needs render-to-texture).
# video_second_pass_shader = "/path/to/second/shader.{cg,shader}"

# Defines if bilinear filtering is used during second pass (needs render-to-texture).
# video_second_pass_smooth = true

# CPU-based filter. Path to a bSNES CPU filter (*.filter)
# video_filter = "/Applications/retroarch/filter/2xSal.filter"

# Video refresh rate of your monitor.
# Used to calculate a suitable audio input rate.
# video_refresh_rate = 59.95

#### Audio

# Enable audio.
audio_enable = true

# Audio driver backend. Depending on configuration possible candidates are: alsa, pulse, oss, jack, rsound, roar, openal, sdl, xaudio, coreaudio
audio_driver = coreaudio

# Audio output samplerate.
audio_out_rate = 48000

# Which resampler to use. "sinc" and "hermite" are currently implemented.
# Default will use "sinc" if compiled in.
# audio_resampler =

# When altering audio_in_rate on-the-fly, define by how much each time.
# audio_rate_step = 0.25

# Override the default audio device the audio_driver uses. This is driver dependant. E.g. ALSA wants a PCM device, OSS wants a path (e.g. /dev/dsp), Jack wants portnames (e.g. system:playback1,system:playback_2), and so on ...
# audio_device =

# External DSP plugin that processes audio before it's sent to the driver.
# audio_dsp_plugin =

# Will sync (block) on audio. Recommended.
# audio_sync = true

#### Input

# Keyboard input. Will recognize normal keypresses and special keys like "left", "right", and so on.
# Keyboard input, Joypad and Joyaxis will all obey the "nul" bind, which disables the bind completely,
# rather than relying on a default.
# input_player1_a = x
# input_player1_b = z
# input_player1_y = a
# input_player1_x = s
# input_player1_start = enter
# input_player1_select = rshift
# input_player1_l = q
# input_player1_r = w
# input_player1_left = left
# input_player1_right = right
# input_player1_up = up
# input_player1_down = down
# input_player1_l2 =
# input_player1_r2 =
# input_player1_l3 =
# input_player1_r3 =

# Two analog sticks (DualShock-esque).
# Bound as usual, however, if a real analog axis is bound,
# it can be read as a true analog.
# Positive X axis is right, Positive Y axis is down.
# input_player1_l_x_plus =
# input_player1_l_x_minus =
# input_player1_l_y_plus =
# input_player1_l_y_minus =
# input_player1_r_x_plus =
# input_player1_r_x_minus =
# input_player1_r_y_plus =
# input_player1_r_y_minus =

# If desired, it is possible to override which joypads are being used for player 1 through 5. First joypad available is 0.
# input_player1_joypad_index = 0
# input_player2_joypad_index = 1
# input_player3_joypad_index = 2
# input_player4_joypad_index = 3
# input_player5_joypad_index = 4
# Player 6-8 is not directly expected by libretro API, but we'll futureproof it.
# input_player6_joypad_index = 5
# input_player7_joypad_index = 6
# input_player8_joypad_index = 7

# Joypad buttons.
# Figure these out by using RetroArch-Phoenix or retroarch-joyconfig.
# You can use joypad hats with hnxx, where n is the hat, and xx is a string representing direction.
# E.g. "h0up"
# input_player1_a_btn = 0
# input_player1_b_btn = 1
# input_player1_y_btn = 3
# input_player1_x_btn = 2
# input_player1_start_btn = 7
# input_player1_select_btn = 6
# input_player1_l_btn = 4
# input_player1_r_btn = 5
# input_player1_left_btn =
# input_player1_right_btn =
# input_player1_up_btn =
# input_player1_down_btn =
# input_player1_l2_btn =
# input_player1_r2_btn =
# input_player1_l3_btn =
# input_player1_r3_btn =

# Axis for RetroArch D-Pad.
# Needs to be either '+' or '-' in the first character signaling either positive or negative direction of the axis, then the axis number.
# Do note that every other input option has the corresponding _btn and _axis binds as well; they are omitted here for clarity.
# input_player1_left_axis = -0
# input_player1_right_axis = +0
# input_player1_up_axis = -1
# input_player1_down_axis = +1

# Holding the turbo while pressing another button will let the button enter a turbo mode
# where the button state is modulated with a periodic signal.
# The modulation stops when the button itself (not turbo button) is released.
# input_player1_turbo =

# Describes the period and how long of that period a turbo-enabled button should behave.
# Numbers are described in frames.
# input_turbo_period = 6
# input_turbo_duty_cycle = 3

# This goes all the way to player 8 (*_player2_*, *_player3_*, etc), but omitted for clarity.
# All input binds have corresponding binds for keyboard (none), joykeys (_btn) and joyaxes (_axis) as well.

# Toggles fullscreen.
# input_toggle_fullscreen = f

# Saves state.
# input_save_state = f2
# Loads state.
# input_load_state = f4

# State slots. With slot set to 0, save state name is *.state (or whatever defined on commandline).
# When slot is != 0, path will be $path%d, where %d is slot number.
# input_state_slot_increase = f7
# input_state_slot_decrease = f6

# Toggles between fast-forwarding and normal speed.
# input_toggle_fast_forward = space

# Applies next and previous XML/Cg shader in directory.
# input_shader_next = m
# input_shader_prev = n

# Toggle between paused and non-paused state
# input_pause_toggle = p

# Frame advance when game is paused
# input_frame_advance = k

# Reset the emulated SNES.
# input_reset = h

# Configures DSP plugin
# input_dsp_config = c

# Cheats.
# input_cheat_index_plus = y
# input_cheat_index_minus = t
# input_cheat_toggle = u

# Mute/unmute audio
# input_audio_mute = f9

# Take screenshot
# input_screenshot = f8

# Netplay flip players.
# input_netplay_flip_players = i

# Hold for slowmotion.
# input_slowmotion = e

# Enable other hotkeys.
# If this hotkey is bound to either keyboard, joybutton or joyaxis,
# all other hotkeys will be disabled unless this hotkey is also held at the same time.
# This is useful for RETRO_KEYBOARD centric implementations
# which query a large area of the keyboard, where it is not desirable
# that hotkeys get in the way.

# Alternatively, all hotkeys for keyboard could be disabled by the user.
# input_enable_hotkey =

# Increases audio volume.
# input_volume_up = kp_plus
# Decreases audio volume.
# input_volume_down = kp_minus

# Toggles to next overlay. Wraps around.
# input_overlay_next =

#### Misc

# Rewinding buffer size in megabytes. Bigger rewinding buffer means you can rewind longer.
# The buffer should be approx. 20MB per minute of buffer time.
rewind_buffer_size = 20

# Rewind granularity. When rewinding defined number of frames, you can rewind several frames at a time, increasing the rewinding speed.
rewind_granularity = 2

# Pause gameplay when window focus is lost.
# pause_nonactive = true

# Autosaves the non-volatile SRAM at a regular interval. This is disabled by default unless set otherwise.
# The interval is measured in seconds. A value of 0 disables autosave.
# autosave_interval =

# When being client over netplay, use keybinds for player 1.
# netplay_client_swap_input = false

# Path to XML cheat database (as used by bSNES).
# cheat_database_path =

# Path to XML cheat config, a file which keeps track of which
# cheat settings are used for individual games.
# If the file does not exist, it will be created.
# cheat_settings_path =
